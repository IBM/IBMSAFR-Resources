--*********************************************************************
--(C) Copyright IBM Corp. Year 1,Year 2. All rights reserved.
--IBM(R) Scalable Architecture for Financial Reporting(TM)
--*********************************************************************
CREATE PROCEDURE GENLFDEPS (IN P_ENVIRONID INT,
                               IN P_ENTITYID INT,
                               IN P_FUNCTCODE CHAR(1),
                               IN P_GROUPID INT,
                               IN P_DESTENVTID INT)

---THIS SP EXTRACTS ALL DEPENDANT AND RELATED COMPONENTS OF LF.

--- P_FUNCTCODE = '1': CALLING FROM EXPORT
--    EXTRACT 'Physical Files', 'Procedures'
--- P_FUNCTCODE = '2': CALLING FROM DEPENDENCY CHECKER
--    EXTRACT ALL DEPS, DIRECT AND INDIRECT
--    EXTRACT 'Physical Files','Procedures', 'Logical Records',
--          'Views','Joins'
-- P_FUNCTCODE = '3': CALLING FROM DEPENDENCY CHECKER
--     EXTRACT DIRECT DEPS ONLY - so not 'Procedures'

DYNAMIC RESULT SETS 1
LANGUAGE SQL
DISABLE DEBUG MODE

BEGIN

 DECLARE SQLSTATE CHAR(5) DEFAULT '00000' ;

 DECLARE DEPLR_CUR CURSOR WITH RETURN
  FOR SELECT DISTINCT
   ENTITYTYPE,CHILDTYPE,
   ENTITYID,ENTITYNAME,
   ENVIRONID,ENVIRON,
   DEFAULTFLG,DEPENDFLG,
   SECRIGHTS
 FROM SESSION.TMPDEPRT;

 DECLARE GLOBAL TEMPORARY TABLE
  SESSION.TMPDEPLF
  (ENTITYTYPE VARCHAR(30),
   CHILDTYPE char(30),
   ENTITYID INT,
   ENTITYNAME VARCHAR(254),
   ENVIRONID INT,
   ENVIRON VARCHAR(50),
   DEFAULTFLG SMALLINT,
   DEPENDFLG CHAR(3))
 ON COMMIT DROP TABLE;


 DECLARE GLOBAL TEMPORARY TABLE SESSION.TMPSEC
   (ENTITYTYPE VARCHAR(30),
    ENVIRONID INT,
    ENTITYID INT,
    SECRIGHTS INT)
 ON COMMIT DROP TABLE;


 DECLARE GLOBAL TEMPORARY TABLE SESSION.TMPDEPRT
    (ENTITYTYPE VARCHAR(30),
    CHILDTYPE CHAR(30),
    ENTITYID INT,
    ENTITYNAME VARCHAR(254),
    ENVIRONID INT,
    ENVIRON VARCHAR(50),
    DEFAULTFLG SMALLINT,
	DEPENDFLG CHAR(3),
    SECRIGHTS INT)
 ON COMMIT DROP TABLE;

-- ------------------------------------------------
-- Sql in this first section is common to Export and DP checker
-- ------------------------------------------------

 INSERT INTO SESSION.TMPDEPLF
  VALUES ('Physical Files','NONE',0,'  ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPLF
 SELECT DISTINCT 'Physical Files' ,'NONE', B.PHYFILEID,
 B.NAME,A.ENVIRONID,A.NAME,0,'N'
 FROM ENVIRON A,
      PHYFILE B,
      LFPFASSOC C
 WHERE A.ENVIRONID=B.ENVIRONID
 AND   B.ENVIRONID=C.ENVIRONID
 AND   B.PHYFILEID=C.PHYFILEID
 AND   C.ENVIRONID=P_ENVIRONID
 AND   C.LOGFILEID=P_ENTITYID;

-- ------------------------------------------------
IF P_FUNCTCODE = '1' OR P_FUNCTCODE = '2' THEN
-- ------------------------------------------------

-- Sql in this branch is for Export and 'All Dependencies' DP checker
-- but not for 'Direct Dependencies' DP checker

	INSERT INTO SESSION.TMPDEPLF
    	VALUES('Procedures','Read',0,' ',0,' ',0,'N');

    INSERT INTO SESSION.TMPDEPLF
    SELECT DISTINCT 'Procedures','Read',B.EXITID,B.NAME,
    A.ENVIRONID,A.NAME,0,'N'
    FROM ENVIRON A,
         EXIT B,
         PHYFILE C,
         SESSION.TMPDEPLF D
    WHERE A.ENVIRONID=B.ENVIRONID
    AND   B.ENVIRONID=C.ENVIRONID
    AND   B.EXITID=C.READEXITID
    AND   C.ENVIRONID=D.ENVIRONID
    AND   C.PHYFILEID=D.ENTITYID
    AND   UPPER(D.ENTITYTYPE)='PHYSICAL FILES'
    AND   D.ENTITYID > 0;

END IF; -- end Func = 1 or 2


-- ------------------------------------------------
IF P_FUNCTCODE = '1' THEN
-- ------------------------------------------------

-- SQL in this branch is for Export only, not for DP checker

--EXTRACT SECURITY ONLY WHEN USER IS NOT ADMINISTRATOR.
 IF P_GROUPID <> 0 THEN

  INSERT INTO SESSION.TMPSEC
    SELECT DISTINCT 'Physical Files',A.ENVIRONID,
           A.PHYFILEID,COALESCE(B.RIGHTS,-1)
    FROM PHYFILE A
       LEFT JOIN SECPHYFILE B
          ON A.PHYFILEID = B.PHYFILEID
          AND A.ENVIRONID=B.ENVIRONID
          AND B.RIGHTS > 0
          AND B.GROUPID = P_GROUPID
    WHERE A.ENVIRONID in (P_DESTENVTID,P_ENVIRONID);

  INSERT INTO SESSION.TMPSEC
    SELECT DISTINCT 'Procedures',A.ENVIRONID,
        A.EXITID,COALESCE(B.RIGHTS,-1)
    FROM EXIT A
       LEFT JOIN SECEXIT B
          ON A.EXITID = B.EXITID
          AND A.ENVIRONID=B.ENVIRONID
          AND B.RIGHTS > 0
          AND B.GROUPID = P_GROUPID
    WHERE A.ENVIRONID in (P_DESTENVTID,P_ENVIRONID);

 END IF;

END IF; -- end Func = 1

-- -----------------------------------------------
IF P_FUNCTCODE = '2' OR P_FUNCTCODE = '3' THEN
-- ------------------------------------------------

-- Sql in this branch used for DP checker only (All deps and 
-- Direct deps), but not for Export

 INSERT INTO SESSION.TMPDEPLF
   VALUES ('Logical Records','NONE',0,'  ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPLF
   SELECT DISTINCT 'Logical Records','NONE',B.LOGRECID,
   B.NAME,A.ENVIRONID,A.NAME,0,'N'
   FROM ENVIRON A
   INNER JOIN LOGREC B
    ON A.ENVIRONID=B.ENVIRONID
   INNER JOIN LRLFASSOC C
    ON B.ENVIRONID =C.ENVIRONID
    AND B.LOGRECID=C.LOGRECID
   WHERE C.ENVIRONID=P_ENVIRONID
    AND C.LOGFILEID=P_ENTITYID;


 INSERT INTO SESSION.TMPDEPLF
  VALUES ('Joins','Target',0,'  ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPLF
  SELECT DISTINCT 'Joins','Target',B.LOOKUPID,B.NAME,
   A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A
  INNER JOIN LOOKUP B
   ON A.ENVIRONID=B.ENVIRONID
  INNER JOIN LOOKUPSTEP C
   ON B.ENVIRONID =C.ENVIRONID
   AND B.LOOKUPID=C.LOOKUPID
  INNER JOIN LRLFASSOC D
   ON C.ENVIRONID =D.ENVIRONID
   AND C.LRLFASSOCID=D.LRLFASSOCID
  WHERE D.ENVIRONID=P_ENVIRONID
   AND D.LOGFILEID=P_ENTITYID;

 INSERT INTO SESSION.TMPDEPLF
  VALUES ('Views','Source',0,'  ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPLF
 SELECT DISTINCT 'Views','Source',B.VIEWID,B.NAME,
 A.ENVIRONID,A.NAME,0,'N'
 FROM ENVIRON A,
      VIEW B,
      VIEWSOURCE C,
      LRLFASSOC D
 WHERE A.ENVIRONID=B.ENVIRONID
 AND   B.ENVIRONID=C.ENVIRONID
 AND   B.VIEWID=C.VIEWID
 AND   C.ENVIRONID=D.ENVIRONID
 AND   C.INLRLFASSOCID=D.LRLFASSOCID
 AND   D.ENVIRONID=P_ENVIRONID
 AND   D.LOGFILEID=P_ENTITYID;

--- SQL TO EXTRACT INFORMATION ABOUT VIEW IN WHICH LF IS USED
--IN LOGIC TEXT.
--- THIS INFORMATION WILL BE EXTRACTED ONLY IF THE ASSOCIATED VIEW
---ARE IN ACTIVE STATE.

 INSERT INTO SESSION.TMPDEPLF
   VALUES ('Views','Logic Text',0,'  ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPLF
 SELECT DISTINCT 'Views','Logic Text' ,B.VIEWID,
 B.NAME,A.ENVIRONID,A.NAME,0,'N'
 FROM ENVIRON A,
      VIEW B,
      VIEWLOGICDEPEND C,
      LFPFASSOC D
 WHERE A.ENVIRONID=B.ENVIRONID
 AND   B.ENVIRONID=C.ENVIRONID
 AND   B.VIEWID=C.VIEWID
 AND   C.ENVIRONID=D.ENVIRONID
 AND   C.LFPFASSOCID=D.LFPFASSOCID
 AND   D.LFPFASSOCID > 0
 AND   D.ENVIRONID=P_ENVIRONID
 AND   D.LOGFILEID=P_ENTITYID;

--- SQL TO EXTRACT INFORMATION ABOUT VIEWS USING LF=P_ENTITYID
--AS OUTPUT LOGICAL FILES.

 INSERT INTO SESSION.TMPDEPLF
   VALUES ('Views','Output',0,'  ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPLF
 SELECT DISTINCT 'Views','Output',B.VIEWID, B.NAME,
 A.ENVIRONID,A.NAME,0,'N'
 FROM ENVIRON A,
      VIEW B,
      LFPFASSOC C
 WHERE A.ENVIRONID=B.ENVIRONID
 AND   B.ENVIRONID=C.ENVIRONID
 AND   B.LFPFASSOCID=C.LFPFASSOCID
 AND   C.ENVIRONID=P_ENVIRONID
 AND   C.LOGFILEID=P_ENTITYID;

 IF P_FUNCTCODE = '2' THEN
 
 INSERT INTO SESSION.TMPDEPLF
  VALUES ('View Folders' ,'None', 0, ' ',0,' ',0,'N') ;
   
 INSERT INTO SESSION.TMPDEPLF
  SELECT DISTINCT 'View Folders' ,'None',
    B.VIEWFOLDERID,
    B.NAME,
    A.ENVIRONID,
    A.NAME,
    0,
    'N'
  FROM ENVIRON A,
       VIEWFOLDER B,
       VFVASSOC C,
       SESSION.TMPDEPLF D
  WHERE A.ENVIRONID=B.ENVIRONID
  AND B.ENVIRONID=C.ENVIRONID
  AND B.VIEWFOLDERID=C.VIEWFOLDERID
  AND C.ENVIRONID=D.ENVIRONID
  AND C.VIEWID=D.ENTITYID
  AND UPPER(D.ENTITYTYPE)='VIEWS'
  AND D.ENTITYID > 0;
  
 END IF; -- END FUNC = 2
  
END IF; -- end Func = 2 or 3
    
 DELETE FROM SESSION.TMPDEPLF
 WHERE ENTITYID = 0
 AND ENVIRONID > 0;

---  CREATE TMPDEPRT WITH SECURITY RIGHTS
 INSERT INTO SESSION.TMPDEPRT
  SELECT SESSION.TMPDEPLF.ENTITYTYPE,
         SESSION.TMPDEPLF.CHILDTYPE,
         SESSION.TMPDEPLF.ENTITYID,
         SESSION.TMPDEPLF.ENTITYNAME,
         SESSION.TMPDEPLF.ENVIRONID,
         SESSION.TMPDEPLF.ENVIRON,
         SESSION.TMPDEPLF.DEFAULTFLG,
         SESSION.TMPDEPLF.DEPENDFLG,
         SESSION.TMPSEC.SECRIGHTS
  FROM SESSION.TMPDEPLF
  LEFT JOIN SESSION.TMPSEC
    ON SESSION.TMPDEPLF.ENTITYTYPE = SESSION.TMPSEC.ENTITYTYPE
    AND SESSION.TMPDEPLF.ENTITYID = SESSION.TMPSEC.ENTITYID;

 OPEN DEPLR_CUR;
 
END