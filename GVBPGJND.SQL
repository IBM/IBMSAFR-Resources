--*********************************************************************
--(C) Copyright IBM Corp. Year 1,Year 2. All rights reserved.
--IBM(R) Scalable Architecture for Financial Reporting(TM)
--*********************************************************************
CREATE PROCEDURE GENLPDEPS(IN P_ENVIRONID INT,
                             IN P_ENTITYID INT,
                             IN P_FUNCTCODE CHAR(1),
                             IN P_GROUPID INT,
                             IN P_DESTENVTID INT)

-- THIS SP EXTRACTS ALL DEPENDANT AND RELATED COMPONENTS OF A JOIN

-- P_FUNCTCODE = '1': CALLING FROM EXPORT
--    EXTRACT 'Logical Records', 'Logical Files', 'Physical Files',
--           'Procedures'
-- P_FUNCTCODE = '2': CALLING FROM DEPENDENCY CHECKER
--    EXTRACT ALL DEPS, DIRECT AND INDIRECT
--    So 'Logical Records', 'Logical Files', 'Physical Files', 
--    'Procedures', 'LR Fields', 'Views'
-- P_FUNCTCODE = '3': CALLING FROM DEPENDENCY CHECKER
--     EXTRACT DIRECT DEPS ONLY - so not PFs and EXITS

DYNAMIC RESULT SETS 1
LANGUAGE SQL
DISABLE DEBUG MODE

BEGIN

 DECLARE SQLSTATE CHAR(5) DEFAULT '00000' ;

 DECLARE DEPJOIN_CUR CURSOR WITH RETURN
  FOR SELECT DISTINCT
   ENTITYTYPE,CHILDTYPE,
   ENTITYID,ENTITYNAME,
   ENVIRONID,ENVIRON,
   DEFAULTFLG,DEPENDFLG,
   SECRIGHTS
 FROM SESSION.TMPDEPRT;

 DECLARE GLOBAL TEMPORARY TABLE SESSION.TMPDEPJOIN
  (ENTITYTYPE VARCHAR(30),CHILDTYPE CHAR(30),
   ENTITYID INT,ENTITYNAME VARCHAR(254),
   ENVIRONID INT,ENVIRON VARCHAR(50),DEFAULTFLG SMALLINT,
   DEPENDFLG CHAR(3))
 ON COMMIT DROP TABLE;

 DECLARE GLOBAL TEMPORARY TABLE SESSION.TMPDEPRT
  (ENTITYTYPE VARCHAR(30),
   CHILDTYPE char(30),
   ENTITYID INT,
   ENTITYNAME VARCHAR(254),
   ENVIRONID INT,
   ENVIRON VARCHAR(50),
   DEFAULTFLG SMALLINT,
   DEPENDFLG CHAR(3),
   SECRIGHTS INT)
 ON COMMIT DROP TABLE;

--TABLE CONTAINS SECURITY INFORMATION OF COMPONENTS
 DECLARE GLOBAL TEMPORARY TABLE SESSION.TMPSEC
  (ENTITYTYPE VARCHAR(30),
   ENVIRONID INT,
   ENTITYID INT,
   SECRIGHTS INT)
 ON COMMIT DROP TABLE;

-- ------------------------------------------------
-- Sql in this first section is common to Export and DP checker
-- ------------------------------------------------

--- SQL TO EXTRACT SOURCE LRs ASSOCIATED WITH JOIN=P_ENTITYID
 INSERT INTO SESSION.TMPDEPJOIN
  VALUES ('Logical Records' ,'Source', 0, ' ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPJOIN
  SELECT DISTINCT 'Logical Records','Source',B.LOGRECID,B.NAME,
   A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A,
   LOGREC B,
   LOOKUPSTEP C
  WHERE A.ENVIRONID=B.ENVIRONID
  AND   B.ENVIRONID=C.ENVIRONID
  AND   B.LOGRECID=C.SRCLRID
  AND   C.ENVIRONID=P_ENVIRONID
  AND   C.LOOKUPID=P_ENTITYID;

--- SQL TO EXTRACT TARGET LRs ASSOCIATED WITH JOIN=P_ENTITYID
 INSERT INTO SESSION.TMPDEPJOIN
   VALUES ('Logical Records' ,'Target', 0, ' ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPJOIN
  SELECT DISTINCT 'Logical Records','Target',B.LOGRECID,B.NAME,
   A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A,
   LOGREC B,
   LRLFASSOC C,
   LOOKUPSTEP D
  WHERE A.ENVIRONID=B.ENVIRONID
  AND   B.ENVIRONID=C.ENVIRONID
  AND   B.LOGRECID=C.LOGRECID
  AND   C.ENVIRONID=D.ENVIRONID
  AND   C.LRLFASSOCID=D.LRLFASSOCID
  AND   D.ENVIRONID=P_ENVIRONID
  AND   D.LOOKUPID=P_ENTITYID;                         	

--- SQL TO EXTRACT TARGET LFs ASSOCIATED WITH JOIN=P_ENTITYID			
 INSERT INTO SESSION.TMPDEPJOIN
  VALUES ( 'Logical Files' ,'Target', 0,'  ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPJOIN
  SELECT DISTINCT 'Logical Files','Target',B.LOGFILEID,B.NAME,
   A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A,
   LOGFILE B,
   LRLFASSOC C,
   LOOKUPSTEP D
  WHERE A.ENVIRONID=B.ENVIRONID
  AND   B.ENVIRONID=C.ENVIRONID
  AND   B.LOGFILEID=C.LOGFILEID
  AND   C.ENVIRONID=D.ENVIRONID
  AND   C.LRLFASSOCID=D.LRLFASSOCID
  AND   D.ENVIRONID=P_ENVIRONID
  AND   D.LOOKUPID=P_ENTITYID;

--- SQL TO EXTRACT SOURCE LFs ASSOCIATED WITH JOIN=P_ENTITYID
 INSERT INTO SESSION.TMPDEPJOIN
  VALUES ('Logical Files' , 'Source', 0,' ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPJOIN
  SELECT DISTINCT 'Logical Files','Source',B.LOGFILEID,B.NAME,
   A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A,
   LOGFILE B,
   LRLFASSOC C,
   LOOKUPSTEP D
  WHERE A.ENVIRONID=B.ENVIRONID
  AND   B.ENVIRONID=C.ENVIRONID
  AND   B.LOGFILEID=C.LOGFILEID
  AND   C.ENVIRONID=D.ENVIRONID
  AND   C.LOGRECID=D.SRCLRID
  AND   D.ENVIRONID=P_ENVIRONID
  AND   D.LOOKUPID=P_ENTITYID;

 INSERT INTO SESSION.TMPDEPJOIN
  SELECT 'Logical Files','Source',B.LOGFILEID,B.NAME,
   A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A,
   LOGFILE B,
   LRLFASSOC C,
   SESSION.TMPDEPJOIN D
  WHERE A.ENVIRONID=B.ENVIRONID
  AND   B.ENVIRONID=C.ENVIRONID
  AND   B.LOGFILEID=C.LOGFILEID
  AND   C.ENVIRONID=D.ENVIRONID
  AND   C.LOGRECID=D.ENTITYID
  AND   UPPER(D.ENTITYTYPE)='LOGICAL RECORDS'
  AND   UPPER(D.CHILDTYPE)='SOURCE';    

 INSERT INTO SESSION.TMPDEPJOIN
 SELECT 'Logical Files','Target',B.LOGFILEID,B.NAME,
 A.ENVIRONID,A.NAME,0,'N'
 FROM ENVIRON A,
      LOGFILE B,
      LRLFASSOC C,
      SESSION.TMPDEPJOIN D
 WHERE A.ENVIRONID=B.ENVIRONID
 AND   B.ENVIRONID=C.ENVIRONID
 AND   B.LOGFILEID=C.LOGFILEID
 AND   C.ENVIRONID=D.ENVIRONID
 AND   C.LOGRECID=D.ENTITYID
 AND   UPPER(D.ENTITYTYPE)='LOGICAL RECORDS'
 AND   UPPER(D.CHILDTYPE)='TARGET';

-- ------------------------------------------------
IF P_FUNCTCODE = '1' OR P_FUNCTCODE = '2' THEN
-- ------------------------------------------------

-- Sql in this branch is for Export and 'All Dependencies' DP checker
-- but not for 'Direct Dependencies' DP checker

    --- SQL TO EXTRACT SOURCE PFs ASSOCIATED WITH JOIN=P_ENTITYID
 INSERT INTO SESSION.TMPDEPJOIN
  VALUES ('Physical Files' , 'Source', 0,' ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPJOIN
 SELECT DISTINCT 'Physical Files','Source',B.PHYFILEID,
 B.NAME,A.ENVIRONID,A.NAME,0,'N'
 FROM ENVIRON A,
      PHYFILE B,
      LFPFASSOC C,
      LRLFASSOC D,
      LOOKUPSTEP E
 WHERE A.ENVIRONID=B.ENVIRONID
 AND   B.ENVIRONID=C.ENVIRONID
 AND   B.PHYFILEID=C.PHYFILEID
 AND   C.ENVIRONID=D.ENVIRONID
 AND   C.LOGFILEID=D.LOGFILEID
 AND   D.ENVIRONID=E.ENVIRONID
 AND   D.LOGRECID=E.SRCLRID
 AND   E.ENVIRONID=P_ENVIRONID
 AND   E.LOOKUPID=P_ENTITYID;  

 INSERT INTO SESSION.TMPDEPJOIN
 SELECT DISTINCT 'Physical Files','Source',B.PHYFILEID,
 B.NAME,A.ENVIRONID,A.NAME,0,'N'
 FROM ENVIRON A,
      PHYFILE B,
      LFPFASSOC C,
      SESSION.TMPDEPJOIN D
 WHERE A.ENVIRONID=B.ENVIRONID
 AND   B.ENVIRONID=C.ENVIRONID
 AND   B.PHYFILEID=C.PHYFILEID
 AND   C.ENVIRONID=D.ENVIRONID
 AND   C.LOGFILEID=D.ENTITYID
 AND   UPPER(D.ENTITYTYPE)='LOGICAL FILES'
 AND   UPPER(D.CHILDTYPE)='SOURCE';     

--- SQL TO EXTRACT  TARGET PFs ASSOCIATED WITH JOIN=P_ENTITYID.

 INSERT INTO SESSION.TMPDEPJOIN
    VALUES ( 'Physical Files' ,'Target', 0,'  ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPJOIN
 SELECT DISTINCT 'Physical Files','Target',B.PHYFILEID,
 B.NAME,A.ENVIRONID,A.NAME,0,'N'
 FROM ENVIRON A,
      PHYFILE B,
      LFPFASSOC C,
      LRLFASSOC D,
      LOOKUPSTEP E
 WHERE A.ENVIRONID=B.ENVIRONID
 AND   B.ENVIRONID=C.ENVIRONID
 AND   B.PHYFILEID=C.PHYFILEID
 AND   C.ENVIRONID=D.ENVIRONID
 AND   C.LOGFILEID=D.LOGFILEID
 AND   D.ENVIRONID=E.ENVIRONID
 AND   D.LRLFASSOCID=E.LRLFASSOCID
 AND   E.ENVIRONID=P_ENVIRONID
 AND   E.LOOKUPID=P_ENTITYID;       

 INSERT INTO SESSION.TMPDEPJOIN
 SELECT DISTINCT 'Physical Files','Target',B.PHYFILEID,
 B.NAME,A.ENVIRONID,A.NAME,0,'N'
 FROM ENVIRON A,
      PHYFILE B,
      LFPFASSOC C,
      SESSION.TMPDEPJOIN D
 WHERE A.ENVIRONID=B.ENVIRONID
 AND   B.ENVIRONID=C.ENVIRONID
 AND   B.PHYFILEID=C.PHYFILEID
 AND   C.ENVIRONID=D.ENVIRONID
 AND   C.LOGFILEID=D.ENTITYID
 AND   UPPER(D.ENTITYTYPE)='LOGICAL FILES'
 AND   UPPER(D.CHILDTYPE)='TARGET';

--- SQL TO EXTRACT LOOKUP AND READ EXITS FOR LRS USED BY THE JOIN

 INSERT INTO SESSION.TMPDEPJOIN
  VALUES('Procedures','Lookup',0,' ',0,' ',0,'N');

 INSERT INTO SESSION.TMPDEPJOIN
 SELECT 'Procedures','Lookup',B.EXITID,B.NAME,
 A.ENVIRONID,A.NAME,0,'N'
 FROM ENVIRON A,
      EXIT B,
      LOGREC C,
      SESSION.TMPDEPJOIN D
 WHERE A.ENVIRONID=B.ENVIRONID
 AND   B.ENVIRONID=C.ENVIRONID
 AND   B.EXITID=C.LOOKUPEXITID
 AND   C.ENVIRONID=D.ENVIRONID
 AND   C.LOGRECID=D.ENTITYID
 AND   UPPER(D.ENTITYTYPE)='LOGICAL RECORDS';   

 INSERT INTO SESSION.TMPDEPJOIN
  VALUES('Procedures','Read',0,' ',0,' ',0,'N');

 INSERT INTO SESSION.TMPDEPJOIN
 SELECT DISTINCT 'Procedures','Read',B.EXITID,B.NAME,
 A.ENVIRONID,A.NAME,0,'N'
 FROM ENVIRON A,
      EXIT B,
      PHYFILE C,
      SESSION.TMPDEPJOIN D
 WHERE A.ENVIRONID=B.ENVIRONID
 AND   B.ENVIRONID=C.ENVIRONID
 AND   B.EXITID=C.READEXITID
 AND   C.ENVIRONID=D.ENVIRONID
 AND   C.PHYFILEID=D.ENTITYID
 AND   UPPER(D.ENTITYTYPE)='PHYSICAL FILES';

END IF; -- end Func = 1 or 2


-- ------------------------------------------------
IF P_FUNCTCODE = '1' THEN
-- ------------------------------------------------

----EXECUTE SECURITY CHECKS ONLY WHEN USER IS NOT ADMINISTRATOR.
 IF P_GROUPID <> 0 THEN

   INSERT INTO SESSION.TMPSEC
    SELECT DISTINCT 'Physical Files',A.ENVIRONID,
     A.PHYFILEID,COALESCE(B.RIGHTS,-1)
    FROM PHYFILE A
    LEFT JOIN SECPHYFILE B
     ON A.PHYFILEID = B.PHYFILEID
     AND A.ENVIRONID=B.ENVIRONID
     AND B.RIGHTS > 0
     AND B.GROUPID = P_GROUPID
    WHERE A.ENVIRONID IN (P_DESTENVTID,P_ENVIRONID);

   INSERT INTO SESSION.TMPSEC
    SELECT DISTINCT 'Logical Files',A.ENVIRONID,
     A.LOGFILEID,COALESCE(B.RIGHTS,-1)
    FROM LOGFILE A
    LEFT JOIN SECLOGFILE B
     ON A.LOGFILEID = B.LOGFILEID
     AND A.ENVIRONID=B.ENVIRONID
     AND B.RIGHTS > 0
     AND B.GROUPID = P_GROUPID
    WHERE A.ENVIRONID IN (P_DESTENVTID,P_ENVIRONID);

   INSERT INTO SESSION.TMPSEC
    SELECT DISTINCT 'Logical Records',A.ENVIRONID,
     A.LOGRECID,COALESCE(B.RIGHTS,-1)
    FROM LOGREC A
    LEFT JOIN SECLOGREC B
     ON A.LOGRECID = B.LOGRECID
     AND A.ENVIRONID=B.ENVIRONID
     AND B.RIGHTS > 0
     AND B.GROUPID = P_GROUPID
    WHERE A.ENVIRONID in (P_DESTENVTID,P_ENVIRONID);

   INSERT INTO SESSION.TMPSEC
    SELECT DISTINCT 'Procedures',A.ENVIRONID,
     A.EXITID,COALESCE(B.RIGHTS,-1)
    FROM EXIT A
    LEFT JOIN SECEXIT B
     ON A.EXITID = B.EXITID
     AND A.ENVIRONID=B.ENVIRONID
     AND B.RIGHTS > 0
     AND B.GROUPID = P_GROUPID
    WHERE A.ENVIRONID in (P_DESTENVTID,P_ENVIRONID);

 END IF;

 UPDATE SESSION.TMPDEPJOIN
 SET CHILDTYPE ='NONE';

END IF; -- end Func = 1


-- -----------------------------------------------
IF P_FUNCTCODE = '2' OR P_FUNCTCODE = '3' THEN
-- ------------------------------------------------

-- Sql in this branch used for DP checker only (All deps and 
-- Direct deps), but not for Export


--- SQL TO EXTRACT SOURCE FIELDS ASSOCIATED WITH JOIN=P_ENTITYID

-- EXTRACT JOINSTEP SOURCE KEY LR FIELDS
 INSERT INTO SESSION.TMPDEPJOIN
  VALUES ('Fields' ,'Source', 0, ' ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPJOIN
  SELECT DISTINCT 'Fields','Source',B.LRFIELDID,B.NAME,
   A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A,
   LRFIELD B,
   LOOKUPSRCKEY C
  WHERE A.ENVIRONID=B.ENVIRONID
  AND   B.ENVIRONID=C.ENVIRONID
  AND   B.LRFIELDID=C.LRFIELDID
  AND   C.ENVIRONID=P_ENVIRONID
  AND   C.LOOKUPID=P_ENTITYID;     

-- EXTRACT PKEY FIELDS FROM TARGET LRS
 INSERT INTO SESSION.TMPDEPJOIN
  VALUES ('Fields' ,'Target', 0, ' ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPJOIN
  SELECT DISTINCT 'Fields', 'Target', B.LRFIELDID, B.NAME,
   B.ENVIRONID, A.NAME,0,'N'
  FROM ENVIRON A,
   LRFIELD B,
   LRINDEXFLD C,
   LRLFASSOC D,
   LOOKUPSTEP E
  WHERE A.ENVIRONID=B.ENVIRONID
  AND   B.ENVIRONID=C.ENVIRONID
  AND   B.LRFIELDID=C.LRFIELDID
  AND   B.ENVIRONID=D.ENVIRONID
  AND   B.LOGRECID=D.LOGRECID
  AND   D.ENVIRONID=E.ENVIRONID
  AND   D.LRLFASSOCID=E.LRLFASSOCID
  AND   E.ENVIRONID=P_ENVIRONID
  AND   E.LOOKUPID=P_ENTITYID;

--- SQL TO EXTRACT VIEWS USING THIS LOOKUP AS A SOURCE

 INSERT INTO SESSION.TMPDEPJOIN
  VALUES ('Views','Source',0,' ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPJOIN    
  SELECT DISTINCT 'Views','Source',B.VIEWID,B.NAME,
   A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A,
   VIEW B,
   VIEWCOLUMNSOURCE C
  WHERE A.ENVIRONID=B.ENVIRONID
  AND   B.ENVIRONID=C.ENVIRONID
  AND   B.VIEWID=C.VIEWID
  AND   C.ENVIRONID=P_ENVIRONID
  AND   C.LOOKUPID=P_ENTITYID;

--- SQL TO EXTRACT VIEWS USING THIS LOOKUP FOR SORT KEY TITLES
 INSERT INTO SESSION.TMPDEPJOIN
  VALUES ('Views','Sort Key Title',0, ' ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPJOIN
  SELECT DISTINCT 'Views','Sort Key Title',B.VIEWID,B.NAME,
   A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A,
   VIEW B,
   VIEWCOLUMNSOURCE C,
   LOOKUP D
  WHERE A.ENVIRONID=B.ENVIRONID
  AND   B.ENVIRONID=C.ENVIRONID
  AND   B.VIEWID=C.VIEWID
  AND   C.ENVIRONID=D.ENVIRONID
  AND   C.SORTTITLELOOKUPID=D.LOOKUPID
  AND   D.ENVIRONID=P_ENVIRONID
  AND   D.LOOKUPID=P_ENTITYID;     

--- SQL TO EXTRACT VIEWS USING THIS LOOKUP IN LOGIC TEXT
 INSERT INTO SESSION.TMPDEPJOIN
  VALUES ('Views','Logic Text',0, ' ',0,' ',0,'N') ;

-- LOOKUP USED IN EXTR REC FILTER
 INSERT INTO SESSION.TMPDEPJOIN
  SELECT DISTINCT 'Views','Logic Text',B.VIEWID,B.NAME,
   A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A,
   VIEW B,
   VIEWLOGICDEPEND C
  WHERE A.ENVIRONID=B.ENVIRONID
  AND   B.ENVIRONID=C.ENVIRONID
  AND   B.VIEWID=C.VIEWID
  AND  (C.LOGICTYPECD=01 OR C.LOGICTYPECD=05) 
  AND   C.ENVIRONID=P_ENVIRONID
  AND   C.LOOKUPID=P_ENTITYID;

-- LOOKUP USED IN EXTR COL ASSGMNT
 INSERT INTO SESSION.TMPDEPJOIN
  SELECT DISTINCT 'Views','Logic Text',B.VIEWID,B.NAME,
   A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A,
   VIEW B,
   VIEWLOGICDEPEND C,
   VIEWCOLUMNSOURCE D
  WHERE A.ENVIRONID=B.ENVIRONID
  AND   B.ENVIRONID=C.ENVIRONID
  AND   B.VIEWID=C.VIEWID
  AND   C.ENVIRONID=D.ENVIRONID
  AND   C.VIEWID=D.VIEWID
  AND   C.PARENTID=D.VIEWCOLUMNSOURCEID
  AND   C.LOGICTYPECD=2
  AND   C.LOOKUPID=P_ENTITYID
  AND   D.ENVIRONID=P_ENVIRONID     
  AND   D.SOURCETYPEID=04;

 IF P_FUNCTCODE = '2' THEN
 
 INSERT INTO SESSION.TMPDEPJOIN
  VALUES ('View Folders' ,'None', 0, ' ',0,' ',0,'N') ;
   
 INSERT INTO SESSION.TMPDEPJOIN
  SELECT DISTINCT 'View Folders' ,'None',
    B.VIEWFOLDERID,
    B.NAME,
    A.ENVIRONID,
    A.NAME,
    0,
    'N'
  FROM ENVIRON A,
       VIEWFOLDER B,
       VFVASSOC C,
       SESSION.TMPDEPJOIN D
  WHERE A.ENVIRONID=B.ENVIRONID
  AND B.ENVIRONID=C.ENVIRONID
  AND B.VIEWFOLDERID=C.VIEWFOLDERID
  AND C.ENVIRONID=D.ENVIRONID
  AND C.VIEWID=D.ENTITYID
  AND UPPER(D.ENTITYTYPE)='VIEWS'
  AND D.ENTITYID > 0;
  
 END IF; -- END FUNC = 2
  
END IF; -- end Func = 2 or 3

 DELETE FROM SESSION.TMPDEPJOIN
 WHERE ENTITYID   = 0
 AND ENVIRONID > 0;

     ---  CREATE TMPDEPRT WITH SECURITY RIGHTS
 INSERT INTO SESSION.TMPDEPRT
  SELECT SESSION.TMPDEPJOIN.ENTITYTYPE,
   SESSION.TMPDEPJOIN.CHILDTYPE,
   SESSION.TMPDEPJOIN.ENTITYID,
   SESSION.TMPDEPJOIN.ENTITYNAME,
   SESSION.TMPDEPJOIN.ENVIRONID,
   SESSION.TMPDEPJOIN.ENVIRON,
   SESSION.TMPDEPJOIN.DEFAULTFLG,
   SESSION.TMPDEPJOIN.DEPENDFLG,
   SESSION.TMPSEC.SECRIGHTS
  FROM SESSION.TMPDEPJOIN
  LEFT JOIN SESSION.TMPSEC
   ON SESSION.TMPDEPJOIN.ENTITYTYPE = SESSION.TMPSEC.ENTITYTYPE
   AND SESSION.TMPDEPJOIN.ENTITYID = SESSION.TMPSEC.ENTITYID;

 OPEN DEPJOIN_CUR ;

END