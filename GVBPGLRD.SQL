--*********************************************************************
--(C) Copyright IBM Corp. Year 1,Year 2. All rights reserved.
--IBM(R) Scalable Architecture for Financial Reporting(TM)
--*********************************************************************
CREATE PROCEDURE GENLRDEPS(IN P_ENVIRONID INT,
                               IN P_ENTITYID INT,
                               IN P_FUNCTCODE CHAR(1),
                               IN P_GROUPID INT,
                               IN P_DESTENVTID INT)

--- THIS SP EXTRACTS ALL DEPENDENCIES OF LOGICAL RECORD.

--- P_FUNCTCODE = '1': CALLING FROM EXPORT
--     EXTRACT 'Logical Files', 'Physical Files',
--           'Procedures''
--- P_FUNCTCODE = '2': CALLING FROM DEPENDENCY CHECKER
--     EXTRACT ALL DEPS, DIRECT AND INDIRECT
--     EXTRACT 'Logical Files','Physical Files', 'Procedures,
--           'Joins','Views', 'LR Fields'
-- P_FUNCTCODE = '3': CALLING FROM DEPENDENCY CHECKER
--     EXTRACT DIRECT DEPS ONLY - so not PFs, Read Exits

DYNAMIC RESULT SETS 1
LANGUAGE SQL
DISABLE DEBUG MODE

BEGIN

 DECLARE SQLSTATE CHAR(5) DEFAULT '00000' ;

 DECLARE DEPLR_CUR CURSOR WITH RETURN
  FOR SELECT DISTINCT
     ENTITYTYPE,CHILDTYPE,
     ENTITYID,ENTITYNAME,
     ENVIRONID,ENVIRON,
     DEFAULTFLG,DEPENDFLG,
     SECRIGHTS
  FROM SESSION.TMPDEPRT;

 DECLARE GLOBAL TEMPORARY TABLE
     SESSION.TMPDEPLR
     (ENTITYTYPE VARCHAR(30),
      CHILDTYPE char(30),
      ENTITYID INT,
      ENTITYNAME VARCHAR(254),
      ENVIRONID INT,
      ENVIRON VARCHAR(50),
      DEFAULTFLG SMALLINT,
      DEPENDFLG CHAR(3))
 ON COMMIT DROP TABLE;

 DECLARE GLOBAL TEMPORARY TABLE
    SESSION.TMPSEC
    (ENTITYTYPE VARCHAR(30),
     ENVIRONID INT,
     ENTITYID INT,
     SECRIGHTS INT)
 ON COMMIT DROP TABLE;

 DECLARE GLOBAL TEMPORARY TABLE
  SESSION.TMPDEPRT
  (ENTITYTYPE VARCHAR(30),
   CHILDTYPE char(30),
   ENTITYID INT,
   ENTITYNAME VARCHAR(254),
   ENVIRONID INT,
   ENVIRON VARCHAR(50),
   DEFAULTFLG SMALLINT,
   DEPENDFLG CHAR(3),
   SECRIGHTS INT)
 ON COMMIT DROP TABLE;

-- ------------------------------------------------
-- Sql in this first section is common to Export and DP checker
-- ------------------------------------------------

 INSERT INTO SESSION.TMPDEPLR
  VALUES ('Logical Files' ,'NONE', 0, ' ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPLR 
 SELECT DISTINCT 'Logical Files','NONE',B.LOGFILEID,
 B.NAME,A.ENVIRONID,A.NAME,0,'N'
 FROM ENVIRON A,
      LOGFILE B,
      LRLFASSOC C
 WHERE A.ENVIRONID=B.ENVIRONID
 AND   B.ENVIRONID=C.ENVIRONID
 AND   B.LOGFILEID=C.LOGFILEID
 AND   C.ENVIRONID=P_ENVIRONID
 AND   C.LOGRECID=P_ENTITYID;

 INSERT INTO SESSION.TMPDEPLR
  VALUES('Procedures','Lookup',0,' ',0,' ',0,'N');

 INSERT INTO SESSION.TMPDEPLR
 SELECT DISTINCT 'Procedures','Lookup',B.EXITID,
 B.NAME,A.ENVIRONID,A.NAME,0,'N'
 FROM ENVIRON A,
      EXIT B,
      LOGREC C
 WHERE A.ENVIRONID=B.ENVIRONID
 AND   B.ENVIRONID=C.ENVIRONID
 AND   B.EXITID=C.LOOKUPEXITID
 AND   C.ENVIRONID=P_ENVIRONID
 AND   C.LOGRECID=P_ENTITYID;  

-- ------------------------------------------------
IF P_FUNCTCODE = '1' OR P_FUNCTCODE = '2' THEN
-- ------------------------------------------------

-- Sql in this branch is for Export and 'All Dependencies' DP checker
-- but not for 'Direct Dependencies' DP checker

 INSERT INTO SESSION.TMPDEPLR
  VALUES ('Physical Files' ,'NONE', 0, ' ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPLR              
 SELECT DISTINCT 'Physical Files','NONE',B.PHYFILEID,
 B.NAME,A.ENVIRONID,A.NAME,0,'N'
 FROM ENVIRON A,
      PHYFILE B,
      LFPFASSOC C,
      LRLFASSOC D
 WHERE A.ENVIRONID=B.ENVIRONID
 AND   B.ENVIRONID=C.ENVIRONID
 AND   B.PHYFILEID=C.PHYFILEID
 AND   C.ENVIRONID=D.ENVIRONID
 AND   C.LOGFILEID=D.LOGFILEID
 AND   D.ENVIRONID=P_ENVIRONID
 AND   D.LOGRECID=P_ENTITYID;

 INSERT INTO SESSION.TMPDEPLR
  VALUES('Procedures','Read',0,' ',0,' ',0,'N');

 INSERT INTO SESSION.TMPDEPLR
 SELECT DISTINCT 'Procedures','Read',B.EXITID,
 B.NAME,A.ENVIRONID,A.NAME,0,'N'
 FROM ENVIRON A,
      EXIT B,
      PHYFILE C,
      SESSION.TMPDEPLR D
 WHERE A.ENVIRONID=B.ENVIRONID
 AND   B.ENVIRONID=C.ENVIRONID
 AND   B.EXITID=C.READEXITID
 AND   C.ENVIRONID=D.ENVIRONID
 AND   C.PHYFILEID=D.ENTITYID
 AND   UPPER(D.ENTITYTYPE)='PHYSICAL FILES';

END IF; -- end Func = 1 or 2

-- ------------------------------------------------
IF P_FUNCTCODE = '1' THEN
-- ------------------------------------------------

-- SQL in this branch is for Export only, not for DP checker

 IF P_GROUPID <> 0 THEN

   INSERT INTO SESSION.TMPSEC
    SELECT DISTINCT 'Physical Files',A.ENVIRONID,
      A.PHYFILEID,COALESCE(B.RIGHTS,-1)
    FROM PHYFILE A
     LEFT JOIN SECPHYFILE B
     ON A.PHYFILEID=B.PHYFILEID
     AND A.ENVIRONID=B.ENVIRONID
     AND B.RIGHTS > 0
     AND B.GROUPID = P_GROUPID
    WHERE A.ENVIRONID IN(P_DESTENVTID,P_ENVIRONID);

   INSERT INTO SESSION.TMPSEC
    SELECT DISTINCT 'Logical Files',A.ENVIRONID,
     A.LOGFILEID,COALESCE(B.RIGHTS,-1)
    FROM LOGFILE A
     LEFT JOIN SECLOGFILE B
     ON A.LOGFILEID=B.LOGFILEID
     AND A.ENVIRONID=B.ENVIRONID
     AND B.RIGHTS > 0
     AND B.GROUPID = P_GROUPID
    WHERE A.ENVIRONID IN(P_DESTENVTID,P_ENVIRONID);

   INSERT INTO SESSION.TMPSEC
    SELECT DISTINCT 'Procedures',A.ENVIRONID,
     A.EXITID,COALESCE(B.RIGHTS,-1)
    FROM EXIT A
     LEFT JOIN SECEXIT B
     ON A.EXITID=B.EXITID
     AND A.ENVIRONID=B.ENVIRONID
     AND B.RIGHTS > 0
     AND B.GROUPID = P_GROUPID
    WHERE A.ENVIRONID IN(P_DESTENVTID,P_ENVIRONID);
	
 END IF;
 
END IF; -- end Func = 1

-- -----------------------------------------------
    IF P_FUNCTCODE = '2' OR P_FUNCTCODE = '3' THEN
-- ------------------------------------------------

-- Sql in this branch used for DP checker only (All deps and 
-- Direct deps), but not for Export

 INSERT INTO SESSION.TMPDEPLR
   VALUES ('Fields' ,'NONE', 0, '  ',0,' ',0,'N')  ;

 INSERT INTO SESSION.TMPDEPLR
  SELECT 'Fields','NONE',B.LRFIELDID,B.NAME,
  A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A
  INNER JOIN LRFIELD B
    ON A.ENVIRONID=B.ENVIRONID
  WHERE B.ENVIRONID=P_ENVIRONID
  AND B.LOGRECID=P_ENTITYID;

 INSERT INTO SESSION.TMPDEPLR
  VALUES ( 'Joins' ,'Source', 0, ' ',0,' ',0,'N')  ;

 INSERT INTO SESSION.TMPDEPLR
  SELECT DISTINCT 'Joins','Source',B.LOOKUPID,
   B.NAME,A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A
  INNER JOIN LOOKUP B
   ON A.ENVIRONID=B.ENVIRONID
  INNER JOIN LOOKUPSTEP C
   ON B.ENVIRONID=C.ENVIRONID
   AND B.LOOKUPID=C.LOOKUPID
  WHERE C.ENVIRONID=P_ENVIRONID
   AND C.SRCLRID=P_ENTITYID;

 INSERT INTO SESSION.TMPDEPLR
  VALUES ('Joins' ,'Target', 0, '  ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPLR
  SELECT DISTINCT 'Joins','Target',B.LOOKUPID,B.NAME,
   A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A
  INNER JOIN LOOKUP B
   ON A.ENVIRONID=B.ENVIRONID
  INNER JOIN LOOKUPSTEP C
   ON B.ENVIRONID=C.ENVIRONID
   AND B.LOOKUPID=C.LOOKUPID
  INNER JOIN LRLFASSOC D
   ON C.ENVIRONID=D.ENVIRONID
   AND C.LRLFASSOCID=D.LRLFASSOCID
  WHERE D.ENVIRONID=P_ENVIRONID
   AND D.LOGRECID=P_ENTITYID;

 INSERT INTO SESSION.TMPDEPLR
   VALUES ('Views','Source', 0, ' ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPLR                  
  SELECT DISTINCT 'Views','Source',B.VIEWID,B.NAME,
   A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A,
   VIEW B,
   VIEWSOURCE C,
   LRLFASSOC D
  WHERE A.ENVIRONID=B.ENVIRONID
  AND   B.ENVIRONID=C.ENVIRONID
  AND   B.VIEWID=C.VIEWID
  AND   C.ENVIRONID=D.ENVIRONID
  AND   C.INLRLFASSOCID=D.LRLFASSOCID
  AND   D.ENVIRONID=P_ENVIRONID
  AND   D.LOGRECID=P_ENTITYID;

 INSERT INTO SESSION.TMPDEPLR 
  SELECT DISTINCT 'Views','Source',B.VIEWID,B.NAME,
   A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A,
   VIEW B,
   VIEWCOLUMNSOURCE C,
   LRFIELD D
  WHERE A.ENVIRONID=B.ENVIRONID
  AND   B.ENVIRONID=C.ENVIRONID
  AND   B.VIEWID=C.VIEWID
  AND   C.ENVIRONID=D.ENVIRONID
  AND   C.LRFIELDID=D.LRFIELDID
  AND   D.ENVIRONID=P_ENVIRONID
  AND   D.LOGRECID=P_ENTITYID;

--- SQL TO EXTRACT INFORMATION ABOUT VIEW IN WHICH LR IS USED IN LOGIC TEXT.
--- THIS INFORMATION WILL BE EXTRACTED ONLY IF THE ASSOCIATED VIEW
----ARE IN ACTIVE STATE.

 INSERT INTO SESSION.TMPDEPLR
  VALUES ('Views','Logic Text', 0, ' ',0,' ',0,'N') ;

 INSERT INTO SESSION.TMPDEPLR 
  SELECT DISTINCT 'Views','Logic Text',B.VIEWID,B.NAME,
  A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A,
       VIEW B,
       VIEWLOGICDEPEND C,
       LRFIELD D
  WHERE A.ENVIRONID=B.ENVIRONID
  AND   B.ENVIRONID=C.ENVIRONID
  AND   B.VIEWID=C.VIEWID
  AND   C.ENVIRONID=D.ENVIRONID 
  AND   C.LRFIELDID=D.LRFIELDID
  AND   (C.LOGICTYPECD=1 OR C.LOGICTYPECD=5)
  AND   C.LRFIELDID > 0
  AND   D.ENVIRONID=P_ENVIRONID
  AND   D.LOGRECID=P_ENTITYID;

 INSERT INTO SESSION.TMPDEPLR 
  SELECT DISTINCT 'Views','Logic Text',B.VIEWID,B.NAME,
  A.ENVIRONID,A.NAME,0,'N'
  FROM ENVIRON A,
       VIEW B,
       VIEWLOGICDEPEND C,
       VIEWCOLUMNSOURCE D,
       LRFIELD E
  WHERE A.ENVIRONID=B.ENVIRONID
  AND   B.ENVIRONID=C.ENVIRONID
  AND   B.VIEWID=C.VIEWID
  AND   C.ENVIRONID=D.ENVIRONID
  AND   C.PARENTID=D.VIEWCOLUMNSOURCEID
  AND   C.VIEWID=D.VIEWID
  AND   C.LRFIELDID=E.LRFIELDID
  AND   C.LOGICTYPECD=02
  AND   D.ENVIRONID=E.ENVIRONID
  AND   D.SOURCETYPEID=04
  AND   E.ENVIRONID=P_ENVIRONID
  AND   E.LOGRECID=P_ENTITYID;

 IF P_FUNCTCODE = '2' THEN
 
 INSERT INTO SESSION.TMPDEPLR
  VALUES ('View Folders' ,'None', 0, ' ',0,' ',0,'N') ;
   
 INSERT INTO SESSION.TMPDEPLR
  SELECT DISTINCT 'View Folders' ,'None',
    B.VIEWFOLDERID,
    B.NAME,
    A.ENVIRONID,
    A.NAME,
    0,
    'N'
  FROM ENVIRON A,
       VIEWFOLDER B,
       VFVASSOC C,
       SESSION.TMPDEPLR D
  WHERE A.ENVIRONID=B.ENVIRONID
  AND B.ENVIRONID=C.ENVIRONID
  AND B.VIEWFOLDERID=C.VIEWFOLDERID
  AND C.ENVIRONID=D.ENVIRONID
  AND C.VIEWID=D.ENTITYID
  AND UPPER(D.ENTITYTYPE)='VIEWS'
  AND D.ENTITYID > 0;
  
 END IF; -- END FUNC = 2
   
END IF; -- end Func = 2 or 3

 DELETE FROM SESSION.TMPDEPLR
 WHERE ENTITYID   = 0
 AND ENVIRONID > 0;

---  CREATE TMPDEPRT WITH SECURITY RIGHTS

 INSERT INTO SESSION.TMPDEPRT
  SELECT SESSION.TMPDEPLR.ENTITYTYPE,
        SESSION.TMPDEPLR.CHILDTYPE,
        SESSION.TMPDEPLR.ENTITYID,
        SESSION.TMPDEPLR.ENTITYNAME,
        SESSION.TMPDEPLR.ENVIRONID,
        SESSION.TMPDEPLR.ENVIRON,
        SESSION.TMPDEPLR.DEFAULTFLG,
        SESSION.TMPDEPLR.DEPENDFLG,
        SESSION.TMPSEC.SECRIGHTS
  FROM SESSION.TMPDEPLR
  LEFT JOIN SESSION.TMPSEC
   ON SESSION.TMPDEPLR.ENTITYTYPE = SESSION.TMPSEC.ENTITYTYPE
   AND SESSION.TMPDEPLR.ENTITYID = SESSION.TMPSEC.ENTITYID;

 OPEN DEPLR_CUR;

END