-- (c) Copyright IBM Corporation 2011. 
-- Copyright Contributors to the GenevaERS Project.
-- SPDX-License-Identifier: Apache-2.0
--
-- ***************************************************************************
-- 
-- Licensed under the Apache License, Version 2.0 (the "License"); 
-- you may not use this file except in compliance with the License. 
-- You may obtain a copy of the License at 
-- 
-- http://www.apache.org/licenses/LICENSE-2.0 
-- 
-- Unless required by applicable law or agreed to in writing, software 
-- distributed under the License is distributed on an "AS IS" BASIS, 
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and 
-- limitations under the License. 
-- ****************************************************************************
--

CREATE PROCEDURE GENPFDEPS (IN P_ENVIRONID INT,
                               IN P_ENTITYID INT,
                               IN P_FUNCTCODE CHAR(1),
                               IN P_GROUPID INT,
                               IN P_DESTENVTID INT)

---THIS SP EXTRACTS ALL DEPENDANT AND RELATED COMPONENTS PF

--- P_FUNCTCODE = '1': CALLING FROM EXPORT
--     EXTRACT 'Procedures'
--- P_FUNCTCODE = '2': CALLING FROM DEPENDENCY CHECKER
--     EXTRACT ALL DEPS, DIRECT AND INDIRECT
--     EXTRACT 'Logical Files','Views', 'Procedures'
-- P_FUNCTCODE = '3': CALLING FROM DEPENDENCY CHECKER
--     EXTRACT DIRECT DEPS ONLY - so not 'Procedures'

DYNAMIC RESULT SETS 1
LANGUAGE SQL
DISABLE DEBUG MODE

BEGIN

  DECLARE SQLSTATE CHAR(5) DEFAULT '00000' ;

  DECLARE DEPPF_CUR CURSOR WITH RETURN
   FOR SELECT  * FROM SESSION.TMPDEPRT
     ORDER BY UPPER(ENTITYTYPE),
     UPPER(CHILDTYPE),
     UPPER(ENTITYNAME);

  DECLARE GLOBAL TEMPORARY TABLE
   SESSION.TMPDEPPF
   (ENTITYTYPE VARCHAR(30),CHILDTYPE char(30),
   ENTITYID INT,ENTITYNAME VARCHAR(254),
   ENVIRONID INT,ENVIRON VARCHAR(50),DEFAULTFLG SMALLINT,
   DEPENDFLG CHAR(3))
  ON COMMIT DROP TABLE;

  DECLARE GLOBAL TEMPORARY TABLE
   SESSION.TMPDEPRT
      (ENTITYTYPE VARCHAR(30),
       CHILDTYPE char(30),
       ENTITYID INT,
       ENTITYNAME VARCHAR(254),
       ENVIRONID INT,
       ENVIRON VARCHAR(50),
       DEFAULTFLG SMALLINT,
       DEPENDFLG CHAR(3),
       SECRIGHTS INT)
  ON COMMIT DROP TABLE;

--TABLE CONTAINS SECURITY INFORMATION OF COMPONENTS

  DECLARE GLOBAL TEMPORARY TABLE SESSION.TMPSEC
	(ENTITYTYPE VARCHAR(30),
     ENVIRONID INT,
     ENTITYID INT,
     SECRIGHTS INT)
  ON COMMIT DROP TABLE;

-- ------------------------------------------------
-- Sql in this first section is common to Export and DP checker
-- ------------------------------------------------

INSERT INTO SESSION.TMPDEPPF
  VALUES ('Procedures','Read',0,'  ',0,' ',0,'N') ;

INSERT INTO SESSION.TMPDEPPF
SELECT DISTINCT 'Procedures','Read',B.EXITID,B.NAME,
A.ENVIRONID,A.NAME,0,'N'
FROM ENVIRON A,
     EXIT B,
     PHYFILE C
WHERE A.ENVIRONID=B.ENVIRONID
AND   B.ENVIRONID=C.ENVIRONID
AND   B.EXITID=C.READEXITID
AND   C.ENVIRONID=P_ENVIRONID
AND   C.PHYFILEID=P_ENTITYID
AND   C.PHYFILEID>0;  

-- ------------------------------------------------
IF P_FUNCTCODE = '1' THEN
-- ------------------------------------------------

-- SQL in this branch is for Export only, not for DP checker

----EXECUTE SECURITY CHECKS ONLY WHEN USER IS NOT ADMINISTRATOR.

 IF P_GROUPID <> 0 THEN

  INSERT INTO SESSION.TMPSEC
   SELECT DISTINCT 'Procedures',A.ENVIRONID,
    A.EXITID,COALESCE(B.RIGHTS,-1)
   FROM EXIT A
   LEFT JOIN SECEXIT B
    ON A.EXITID = B.EXITID
    AND A.ENVIRONID=B.ENVIRONID
    AND B.RIGHTS > 0
    AND B.GROUPID = P_GROUPID
   WHERE A.ENVIRONID IN(P_DESTENVTID,P_ENVIRONID);

 END IF;

END IF; -- end Func = 1

-- -----------------------------------------------
IF P_FUNCTCODE = '2' OR P_FUNCTCODE = '3' THEN
-- ------------------------------------------------

-- Sql in this branch used for DP checker only (All deps and 
-- Direct deps), but not for Export
INSERT INTO SESSION.TMPDEPPF
  VALUES ('Logical Files','NONE',0,'  ',0,' ',0,'N') ;

INSERT INTO SESSION.TMPDEPPF
SELECT DISTINCT 'Logical Files','NONE',B.LOGFILEID,B.NAME,
A.ENVIRONID,A.NAME,0,'N'
FROM ENVIRON A,
     LOGFILE B,
     LFPFASSOC C
WHERE A.ENVIRONID=B.ENVIRONID
AND   B.ENVIRONID=C.ENVIRONID     
AND   B.LOGFILEID=C.LOGFILEID
AND   C.ENVIRONID=P_ENVIRONID
AND   C.PHYFILEID=P_ENTITYID
AND   C.PHYFILEID>0;       

--- SQL TO EXTRACT INFORMATION ABOUT VIEW IN WHICH PF
--- IS USED IN LOGIC TEXT.
--- THIS INFORMATION WILL BE EXTRACTED ONLY IF THE ASSOCIATED
--- VIEW ARE IN ACTIVE STATE.
			
INSERT INTO SESSION.TMPDEPPF
 VALUES ('Views','Logic Text',0, ' ',0,' ',0,'N') ;

INSERT INTO SESSION.TMPDEPPF
SELECT 'Views','Logic Text',B.VIEWID,B.NAME,
A.ENVIRONID,A.NAME,0,'N'
FROM ENVIRON A,
     VIEW B,
     VIEWLOGICDEPEND C,
     LFPFASSOC D
WHERE A.ENVIRONID=B.ENVIRONID
AND   B.ENVIRONID=C.ENVIRONID
AND   B.VIEWID=C.VIEWID
AND   C.ENVIRONID=D.ENVIRONID  
AND   C.LFPFASSOCID=D.LFPFASSOCID      
AND   D.ENVIRONID=P_ENVIRONID
AND   D.PHYFILEID=P_ENTITYID
AND   D.PHYFILEID>0; 

INSERT INTO SESSION.TMPDEPPF
   VALUES ('Views','Output',0, ' ',0,' ',0,'N') ;

INSERT INTO SESSION.TMPDEPPF
SELECT 'Views','Output',B.VIEWID,B.NAME,
A.ENVIRONID,A.NAME,0,'N'
FROM ENVIRON A,
     VIEW B,
     LFPFASSOC C
WHERE A.ENVIRONID=B.ENVIRONID
AND   B.ENVIRONID=C.ENVIRONID
AND   B.LFPFASSOCID=C.LFPFASSOCID
AND   C.ENVIRONID=P_ENVIRONID
AND   C.PHYFILEID=P_ENTITYID
AND   C.PHYFILEID>0;

 IF P_FUNCTCODE = '2' THEN
 
 INSERT INTO SESSION.TMPDEPPF
  VALUES ('View Folders' ,'None', 0, ' ',0,' ',0,'N') ;
   
 INSERT INTO SESSION.TMPDEPPF
  SELECT DISTINCT 'View Folders' ,'None',
    B.VIEWFOLDERID,
    B.NAME,
    A.ENVIRONID,
    A.NAME,
    0,
    'N'
  FROM ENVIRON A,
       VIEWFOLDER B,
       VFVASSOC C,
       SESSION.TMPDEPPF D
  WHERE A.ENVIRONID=B.ENVIRONID
  AND B.ENVIRONID=C.ENVIRONID
  AND B.VIEWFOLDERID=C.VIEWFOLDERID
  AND C.ENVIRONID=D.ENVIRONID
  AND C.VIEWID=D.ENTITYID
  AND UPPER(D.ENTITYTYPE)='VIEWS'
  AND D.ENTITYID > 0;
  
 END IF; -- END FUNC = 2

END IF; -- end Func = 2 or 3

--DELETE DUMMY ENTITIES

 DELETE FROM SESSION.TMPDEPPF
 WHERE ENTITYID   = 0
 AND ENVIRONID > 0;

---  CREATE TMPDEPPFRET WITH SECURITY RIGHTS
 INSERT INTO SESSION.TMPDEPRT
  SELECT SESSION.TMPDEPPF.ENTITYTYPE,
         SESSION.TMPDEPPF.CHILDTYPE,
         SESSION.TMPDEPPF.ENTITYID,
         SESSION.TMPDEPPF.ENTITYNAME,
         SESSION.TMPDEPPF.ENVIRONID,
         SESSION.TMPDEPPF.ENVIRON,
         SESSION.TMPDEPPF.DEFAULTFLG,
         SESSION.TMPDEPPF.DEPENDFLG,
         SESSION.TMPSEC.SECRIGHTS
  FROM SESSION.TMPDEPPF
  LEFT JOIN SESSION.TMPSEC
   ON SESSION.TMPDEPPF.ENTITYTYPE = SESSION.TMPSEC.ENTITYTYPE
   AND SESSION.TMPDEPPF.ENTITYID = SESSION.TMPSEC.ENTITYID;

 OPEN DEPPF_CUR ;

END
